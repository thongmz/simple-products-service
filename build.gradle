buildscript {
	repositories {
		gradlePluginPortal()
	}
	dependencies {
		classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.17'
	}
}

plugins {
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "maven-publish"
	id "idea"
	id "eclipse"
	id "jacoco"
	id "com.google.cloud.tools.jib"
	id "com.gorylenko.gradle-git-properties"
	id "org.sonarqube"
	id "io.spring.nohttp"
	// for gRPC
	id 'com.google.protobuf' version '0.8.17'
}
def grpcVersion = '1.39.0'
def protobufVersion = '3.4.0'
def jacksonVersion = '2.12.4'

group = 'com.fleta.vodcontentsservice'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

apply from: "gradle/docker.gradle"
apply from: "gradle/sonar.gradle"

if (project.hasProperty("prod") || project.hasProperty("gae")) {
	apply from: "gradle/profile_prod.gradle"
} else {
	apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
	apply from: "gradle/war.gradle"
}

if (project.hasProperty("gae")) {
	apply plugin: 'maven'
	apply plugin: 'org.springframework.boot.experimental.thin-launcher'
	apply plugin: 'io.spring.dependency-management'

	dependencyManagement {
		imports {
			mavenBom "tech.megazone:mega-dependencies:${megaDependenciesVersion}"
		}
	}
	appengineStage.dependsOn thinResolve
}

if (project.hasProperty("zipkin")) {
	apply from: "gradle/zipkin.gradle"
}

idea {
	module {
		excludeDirs += files("node_modules")
	}
}

eclipse {
	sourceSets {
		main {
			java {
				srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
			}
		}
	}
}

defaultTasks "bootRun"

springBoot {
	mainClassName = "com.fleta.productsservice.ProductsServiceApp"
}

test {
	useJUnitPlatform()
	exclude "**/*IT*", "**/*IntTest*"

	testLogging {
		events 'FAILED', 'SKIPPED'
	}
	// ignoreFailures true
	reports.html.enabled = false
}

task integrationTest(type: Test) {
	useJUnitPlatform()
	description = "Execute integration tests."
	group = "verification"
	include "**/*IT*", "**/*IntTest*"

	testLogging {
		events 'FAILED', 'SKIPPED'
	}

	if (project.hasProperty('testcontainers')) {
		environment 'SPRING_PROFILES_ACTIVE', 'testcontainers'
	}

	// ignoreFailures true
	reports.html.enabled = false
}

check.dependsOn integrationTest
task testReport(type: TestReport) {
	destinationDir = file("$buildDir/reports/tests")
	reportOn test
}

task integrationTestReport(type: TestReport) {
	destinationDir = file("$buildDir/reports/tests")
	reportOn integrationTest
}


gitProperties {
	failOnNoGitDirectory = false
	keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

checkstyle {
	toolVersion "${checkstyleVersion}"
	configFile file("checkstyle.xml")
	checkstyleTest.enabled = false
}
nohttp {
	source.include "build.gradle", "README.md"
}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
//	providedRuntime
//	implementation.exclude module: "spring-boot-starter-tomcat"
//	all {
//		resolutionStrategy {
//			// Inherited version from Spring Boot can't be used because of regressions:
//			// To be removed as soon as spring-boot use the same version
//		}
//	}
}

repositories {
	mavenLocal()
	mavenCentral()
}

dependencies {
	implementation group: "com.megazone.framework", name: "mega-framework", version: "${megaDependenciesVersion}", {
		exclude group: "org.springframework", module: "spring-webmvc"
	}

	implementation "io.dropwizard.metrics:metrics-core"
	implementation "io.micrometer:micrometer-registry-prometheus"
	implementation "io.micrometer:micrometer-registry-prometheus"
	implementation 'com.zaxxer:HikariCP:5.0.0'

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.data:spring-data-relational:2.2.4'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "org.springframework.boot:spring-boot-starter-logging"
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-configuration-processor'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.apache.commons:commons-lang3'
	implementation 'commons-beanutils:commons-beanutils:1.9.4'


	runtimeOnly 'org.postgresql:postgresql'

    implementation "io.netty:netty-tcnative-boringssl-static"
	implementation 'org.springframework.cloud:spring-cloud-starter:3.0.3'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix:2.2.9.RELEASE'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:3.0.3'

	implementation 'org.springframework.retry:spring-retry:1.3.1'
	implementation "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

	implementation 'org.liquibase:liquibase-core:4.4.3'

	// api documentation
	implementation 'org.springdoc:springdoc-openapi-ui:1.5.10'

	//for gRPC"
	implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
	implementation "io.grpc:grpc-stub:${grpcVersion}"
	implementation "io.grpc:grpc-protobuf:${grpcVersion}"
	implementation "io.grpc:grpc-core:${grpcVersion}"
	implementation "io.grpc:grpc-api:${grpcVersion}"
	implementation "io.grpc:grpc-okhttp:${grpcVersion}"
	implementation "io.grpc:grpc-netty:${grpcVersion}"

	implementation 'org.zalando:problem-spring-web:0.26.2'
	implementation group: 'ch.simas.qlrm', name: 'qlrm', version: '1.7.1'


	implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
	implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc:${jacksonVersion}"
	implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${jacksonVersion}"

	implementation 'org.modelmapper:modelmapper:2.4.4'
	implementation 'org.apache.kafka:kafka-clients:2.8.0'

}
protobuf {
	protoc {
		// The artifact spec for the Protobuf Compiler
		artifact = "com.google.protobuf:protoc:${protobufVersion}"
	}
	clean {
		delete protobuf.generatedFilesBaseDir
	}
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
		}
	}
	generateProtoTasks {
		all()*.plugins {
			grpc {}
		}
	}
}
test {
	useJUnitPlatform()
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo